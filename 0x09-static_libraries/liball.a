!<arch>
0-isupper.c/    0           0     0     644     239       `
#include "main.h"
/**
 * _isupper - checks for uppercase letters
 * @c: the character to be checked
 * Return: 1 if the character is uppercase, else 0
 */
int _isupper(int c)
{
	if (c >= 'A' && c <= 'z')
	{
		return (1);
	}
	return (0);
}

0-memset.c/     0           0     0     644     303       `
#include "main.h"
/**
 * _memset - it writes a value into a block of memory
 * @s: the memory address to be filled
 * @b: the value
 * @n: the number of bytes used
 * Return: 0
 */
char *_memset(char *s, char b, unsigned int n)
{
	int i = 0;

	for (; n > 0; i++)
	{
		s[i] = b;
		n--;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     353       `
#include "main.h"
/**
 * _strcat - it concatenates two strings and returns the result
 *  @dest: a value
 *  @src: a value
 *  Return: dest
 */
char *_strcat(char *dest, char *src)
{
	int m;
	int n;

	m = 0;
	while (dest[m] != '\0')
	{
		m++;
	}
	n = 0;
	while (src[n] != '\0')
	{
		dest[m] = src[n];
		m++;
		n++;
	}
	dest[m] = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     459       `
#include "main.h"
/**
 * _atoi - It converts a given string into an integer
 * @s: The string to be converted
 * Return: The integer from the converted string
 */
int _atoi(char *s)
{
	int a = 1;
	int l = 0;
	unsigned int b = 0;

	while (!(s[l] <= '9' && s[l] >= '0') && s[l] != '\0')
	{
		if (s[l] == '-')
		{
			a *= -1;
		}
		l++;
	}
	while (s[l] <= '9' && (s[l] >= '0' && s[l] != '\0'))
	{
		b = (b * 10) + (s[l] - '0');
		l++;
	}
	b *= a;
	return (b);
}

1-isdigit.c/    0           0     0     644     207       `
#include "main.h"
/**
 * _isdigit - A function that checks for a digit
 *  @c: the value to be checked
 *  Return: 1 if the value is digit, else 0
 */
int _isdigit(int c)
{
	return (c >= '0' && c <= '9');
}

1-memcpy.c/     0           0     0     644     362       `
#include "main.h"
/**
 * _memcpy - copies a block of memory area to another area
 *  @dest: the area used to store the copied block
 *  @src: the copied area
 *  @n: the number of bytes copied
 *  Return: dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	int m = 0;
	int q = 0;

	for (; m < q; m++)
	{
	dest[m] = src[m];
n--;
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     376       `
#include "main.h"
/**
 * _strncat - A function that concatenates two strings
 * @dest: A string
 * @src: A string
 * @n: An input
 * Return: dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int m;
	int p;

	m = 0;
	while (dest[m] != '\0')
	{
		m++;
	}
	p = 0;
	while (p < n && src[p] != '\0')
	{
		dest[m] = src[p];
		m++;
		p++;
	}
	dest[m] = '\0';
	return (dest);
}
2-strchr.c/     0           0     0     644     256       `
#include "main.h"
/**
 * _strchr - The starting point of the program
 * @s: An input
 * @c: An input
 * Return: 0
 */
char *_strchr(char *s, char c)
{
	int m = 0;

	for (; s[m] >= '\0'; m++)
	{
		if (s[m] == c)
		{
			return (&s[m]);
		}
	}
	return (0);
}
2-strlen.c/     0           0     0     644     221       `
#include "main.h"
/**
 * _strlen - A program that returns the length of a string
 *  @s: The string
 *  Return: length
 */
int _strlen(char *s)
{
	int len = 0;

	while (*s != '\0')
	{
		len++;
		s++;
	}
	return (len);
}


2-strncpy.c/    0           0     0     644     339       `
#include "main.h"
/**
 * _strncpy - it copies a string
 * @dest: An input
 * @src: An input
 * @n: the number of times it copies
 * Return: dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int m = 0;

	while (m < n && src[m] != '\0')
	{
		dest[m] = src[m];
		m++;
	}
	while (m < n)
	{
		dest[m] = '\0';
		m++;
	}
	return (dest);
}

3-islower.c/    0           0     0     644     211       `
#include "main.h"
/**
 * _islower - checks for lowercase characters
 * @c: The value to be checked
 * Return: 1 if the value is lowercase, otherwise 0
 */
int _islower(int c)
{
	return (c >= 'a' && c <= 'z');
}

3-puts.c/       0           0     0     644     219       `
#include "main.h"
/**
 * _puts - A function that prints a string to the stdout
 * @s: The string
 * _putchar prints new line
 * Return: 0
 */
void _puts(char *s)
{
	while (*s)
	{
		_putchar(*s++);
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     311       `
#include "main.h"
/**
 * _strcmp - Is a program that compares string values
 * @s1: A string
 * @s2: A string
 * Return: s1[m] - s2[m]
 */
int _strcmp(char *s1, char *s2)
{
	int m = 0;

	while (s1[m] != '\0' && s2[m] != '\0')
	{
		if (s1[m] != s2[m])
		{
			return (s1[m] - s2[m]);
		}
		m++;
	}
	return (0);
}

3-strspn.c/     0           0     0     644     367       `
#include "main.h"
/**
 * _strspn - The starting point
 * @s: An input
 * @accept: An input
 * Return: 0
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int n = 0;
	int m;

	while (*s)
	{
		for (m = 0; accept[m]; m++)
		{
			if (*s == accept[m])
			{
				n++;
				break;
			}
			else if (accept[m + 1] == '\0')
				return (n);
		}
		s++;
	}
	return (n);
}

4-isalpha.c/    0           0     0     644     245       `
#include "main.h"
/**
 * _isalpha - A program that checks for aphabet letters
 * @c: The character to be checked
 * Return: 1 if it is alphabet, otherwise 0
 */
int _isalpha(int c)
{
	return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}

4-strpbrk.c/    0           0     0     644     279       `
#include "main.h"
/**
 * _strpbrk - The starting point
 * @s: An input
 * @accept: An input
 * Return: 0
 */
char *_strpbrk(char *s, char *accept)
{
	int m;

	while (*s)
	{
		for (m = 0; accept[m]; m++)
		{
			if (*s == accept[m])
				return (s);
		}
		s++;
	}
	return ('\0');
}

5-strstr.c/     0           0     0     644     367       `
#include "main.h"
/**
 * _strstr - Where the program starts
 * @haystack: An input
 * @needle: An input
 * Return: 0
 */
char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0'; haystack++)
	{
		char *m = haystack;
		char *n = needle;

		while (*m == *n && *n != '\0')
		{
			m++;
			n++;
		}
		if (*n == '\0')
			return (haystack);
	}
	return (0);
}

6-abs.c/        0           0     0     644     235       `
#include "main.h"
/**
 * _abs - A program that calculates the absolute value of an integer
 * @n: The integer to be computed
 * Return: The absolute value computed
 */
int _abs(int n)
{
	if (n >= 0)
	{
		return (n);
	}
	return (-n);
}

9-strcpy.c/     0           0     0     644     350       `
#include "main.h"
/**
 * _strcpy - A program that prints the string that src points to
 * @dest: Where to copy to
 * @src: where to copy from
 * Return: String
 */
char *_strcpy(char *dest, char *src)
{
	int m = 0;
	int n = 0;

	while (*(src + m) != '\0')
	{
		m++;
	}
	for (; n < m; n++)
	{
		dest[n] = src[n];
	}
	dest[m] = '\0';
	return (dest);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

